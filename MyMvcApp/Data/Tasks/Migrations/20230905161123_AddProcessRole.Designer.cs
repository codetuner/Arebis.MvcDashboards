// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMvcApp.Data.Tasks;

#nullable disable

namespace MyMvcApp.Data.Tasks.Migrations
{
    [DbContext(typeof(TasksDbContext))]
    [Migration("20230905161123_AddProcessRole")]
    partial class AddProcessRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyMvcApp.Data.Tasks.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Succeeded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UtcTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UtcTimeDone")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UtcTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UtcTimeToExecute")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.ToTable("Task", "tasks");
                });

            modelBuilder.Entity("MyMvcApp.Data.Tasks.TaskDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImplementationClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskDefinition", "tasks");
                });

            modelBuilder.Entity("MyMvcApp.Data.Tasks.Task", b =>
                {
                    b.HasOne("MyMvcApp.Data.Tasks.TaskDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");
                });
#pragma warning restore 612, 618
        }
    }
}
